#! /usr/bin/env python3
from IPython import embed # debug import
import os
import numpy as np
import numpy.random as npr
from pathlib import Path
from utils import generate_seed_from_parameters
from params import (
    generate_species_tree_params,
    get_params_generate_species_tree,
    get_params_create_transfers_file,
    get_params_generate_gene_tree,
    get_params_sampling_trees,
    get_params_reconcile_gene_tree,
    get_params_extract_rates,
    get_params_reconcile_all_gene_trees,
)

configfile: 'config.yaml'

"""
## Construction Choices:
- Functions are called within `run` blocks, passing only the necessary variables.
- This approach improves modularity and allows functions to be tested independently of Snakemake.
"""

PARENT_PATH = Path(config['parent_path']).resolve()
RESOURCES_PATH = Path(config['resources_path']).resolve()

R_SCRIPT = RESOURCES_PATH / "species_tree_generator.R"
GENE_TRANSFER_SCRIPT = RESOURCES_PATH / "gene_transfer_script"
SAMPLE_SCRIPT = RESOURCES_PATH / "sample_script"
EXTRACT_EXTANT_SPECIES_SCRIPT = RESOURCES_PATH / "extract_extant_script"

## OUTPUT FOLDERS PATHS
OUTPUT_FOLDER = Path(config['output_folder']).resolve()

## OUTPUT FILES PATHS
OUTPUT_NAME_COMPLETE = "complete_species_tree.nwk"
OUTPUT_NAME_EXTANT = "extant_species_tree.nwk"

N_SP_TREES = config['n_sp_trees']
N_GENES = config['n_genes']
START_INDEX = config['start_index']
SEED = config['seed']
DISTRIBUTION = config['distribution']
PARAMETERS_ESTIMATION_GENE_PROPORTION = config['parameters_estimation_gene_proportion']
END_INDEX_ESTIMATION = int(N_GENES * PARAMETERS_ESTIMATION_GENE_PROPORTION)
END_INDEX = N_GENES

# Generate species tree parameters
species_tree_params = generate_species_tree_params(N_SP_TREES, N_GENES, SEED, config)

rule all:
    input:
        proof_reconciliation=expand(
            OUTPUT_FOLDER / "species_tree_{sp_tree_index}/reconciliations/done",
            sp_tree_index=range(N_SP_TREES),
        )

rule generate_species_tree:
    """Simulates species tree with names only on leaves."""
    output:
        complete_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / OUTPUT_NAME_COMPLETE),
        extant_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / OUTPUT_NAME_EXTANT),
        branch_length=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / "branch_length.txt"),

    params:
        lambda wildcards: get_params_generate_species_tree(
            wildcards,
            species_tree_params,
            OUTPUT_FOLDER,
            R_SCRIPT,
            EXTRACT_EXTANT_SPECIES_SCRIPT,
            SEED,
            N_GENES,
        )
    run:
        from scripts.generate_species_tree import generate_species_tree
        params = params[0]
        # import IPython; IPython.embed()
        generate_species_tree(
            extant_species=params['extant_species'],
            birth_rate=params['birth_rate'],
            death_rate=params['death_rate'],
            sp_tree_index=wildcards.sp_tree_index,
            output_folder=OUTPUT_FOLDER,
            output_complete_tree=output.complete_tree,
            seed=params['seed'],
            r_script=params['r_script'],
            extract_extant_script=params['extract_extant_script'],
            total_branch_length_txt=output.branch_length,
            n_extant_nodes=params['n_extant_nodes'],
        )

rule create_transfers_file:
    """Create the desired number of transfers for each gene tree."""
    input:
        branch_length=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / "branch_length.txt"),
    output:
        transfers=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / "transfers_file.txt")

    params:
        lambda wildcards: get_params_create_transfers_file(
            wildcards,
            species_tree_params,
            OUTPUT_FOLDER,
            DISTRIBUTION,
            N_GENES,
            SEED,
        )
    run:
        from scripts.create_transfers_file import create_transfers_file
        params = params[0]
        create_transfers_file(
            branch_length_file=input.branch_length,
            transfers_file=output.transfers,
            n_genes=params['n_genes'],
            distribution=params['distribution'],
            seed=params['seed'],
            transfer_rate=params['transfer_rate'],
        )

rule generate_gene_tree:
    """Generate gene trees with random horizontal gene transfer events."""
    input:
        complete_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / OUTPUT_NAME_COMPLETE),
        transfers=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / "transfers_file.txt"),
    output:
        generated_gene_trees_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/complete/tree_0/genes/generated_gene_trees_proof.txt"),
    params:
        lambda wildcards: get_params_generate_gene_tree(
            wildcards,
            species_tree_params,
            OUTPUT_FOLDER,
            GENE_TRANSFER_SCRIPT,
            SEED,
            N_GENES,
        )
    run:
        from scripts.generate_gene_tree import generate_gene_tree
        params = params[0]
        generate_gene_tree(
            complete_species_tree=input.complete_species_tree,
            transfers_file=input.transfers,
            output_complete=params['output_complete'],
            seed=params['seed'],
            gene_transfer_script=params['gene_transfer_script'],
            generated_gene_trees_proof=output.generated_gene_trees_proof,
        )

rule sampling_trees:
    """Sample species from the extant species tree and sample gene trees."""
    input:
        complete_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / OUTPUT_NAME_COMPLETE),
        extant_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}" / OUTPUT_NAME_EXTANT),
        generated_gene_trees_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/complete/tree_0/genes/generated_gene_trees_proof.txt"),
    output:
        sampled_gene_trees_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/sampled/sampled_trees/sampled_gene_trees_proof.txt"),
        sampled_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/sampled/sampled_trees/sampled_species_tree.nwk"),
    params:
        lambda wildcards: get_params_sampling_trees(
            wildcards,
            species_tree_params,
            OUTPUT_FOLDER,
            SAMPLE_SCRIPT,
            START_INDEX,
            END_INDEX,
            SEED,
            N_GENES,
        )
    run:
        from scripts.sampling_trees import sample_trees
        params = params[0]
        generated_gene_trees_proof = Path(input.generated_gene_trees_proof)
        generated_gene_trees_folder = generated_gene_trees_proof.parent.parent
        generated_gene_trees_folder = str(generated_gene_trees_folder)
        sample_trees(
            complete_species_tree=input.complete_species_tree,
            extant_species_tree=input.extant_species_tree,
            generated_gene_trees_folder=generated_gene_trees_folder,
            n_sampled_nodes=params['n_sampled_nodes'],
            start_index=params['start_index'],
            end_index=params['end_index'],
            output_dir=os.path.dirname(output.sampled_gene_trees_proof),
            seed=params['seed'],
            sample_script=SAMPLE_SCRIPT,
        )
        print(f"sampled gene {wildcards.sp_tree_index}")
        with open(output.sampled_gene_trees_proof, "w+") as f:
            f.write("done!")

rule prepare_species_tree_for_reconciliation:
    """Prepare the sampled species tree for reconciliation."""
    input:
        sampled_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/sampled/sampled_trees/sampled_species_tree.nwk"),
    output:
        sampled_species_tree_ale=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/prepared/ale_sampled_species_tree.nwk")
    params:
        time="00:10:00",
        cpus="1",
        mem="1G",
        name="prepare_species_tree_for_reconciliation",
    run:
        from scripts.prepare_species_tree_for_reconciliation import prepare_species_tree_for_reconciliation
        prepare_species_tree_for_reconciliation(
            sampled_species_tree=input.sampled_species_tree,
            sampled_species_tree_ale=output.sampled_species_tree_ale,
        )

rule prepare_gene_tree_for_reconciliation:
    """Prepare the sampled gene trees for reconciliation by running ALEobserve."""
    input:
        sampled_gene_trees_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/sampled/sampled_trees/sampled_gene_trees_proof.txt"),
    output:
        prepared_gene_trees_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/prepared/prepared_gene_trees_proof.txt")
    params:
        start_index=START_INDEX,
        end_index=END_INDEX,
        time="00:10:00",
        cpus="1",
        mem="1G",
        name="prepare_gene_tree_for_reconciliation",
    run:
        from scripts.prepare_gene_tree_for_reconciliation import prepare_gene_tree_for_reconciliation
        prepare_gene_tree_for_reconciliation(
            sampled_gene_trees_dir=os.path.dirname(input.sampled_gene_trees_proof),
            prepared_gene_trees_dir=os.path.dirname(output.prepared_gene_trees_proof),
            start_index=params['start_index'],
            end_index=params['end_index'],
            prepared_gene_trees_proof=output.prepared_gene_trees_proof,
        )

rule reconcile_gene_tree:
    """Reconcile 10% of the prepared sampled gene trees to estimate rates."""
    input:
        prepared_gene_tree_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/prepared/prepared_gene_trees_proof.txt"),
        prepared_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/prepared/ale_sampled_species_tree.nwk"),
    output:
        proof_reconciliation_estimation=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/reconciliations_estimation/done"),
    params:
        lambda wildcards: get_params_reconcile_gene_tree(
            wildcards,
            species_tree_params,
            OUTPUT_FOLDER,
            START_INDEX,
            END_INDEX_ESTIMATION,
        )
    run:
        from scripts.reconcile_gene_tree import reconcile_gene_tree
        params = params[0]
        reconcile_gene_tree(
            prepared_species_tree=input.prepared_species_tree,
            prepared_gene_trees_dir=os.path.dirname(input.prepared_gene_tree_proof),
            start_index=params['start_index'],
            end_index_estimation=params['end_index_estimation'],
            reconciliations_estimation_dir=os.path.dirname(output.proof_reconciliation_estimation),
            proof_reconciliation_estimation=output.proof_reconciliation_estimation,
        )

rule extract_rates:
    """Extract rates of duplications, transfers, and losses."""
    input:
        proof_reconciliations_estimation=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/reconciliations_estimation/done"),
    output:
        rates=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/rates.txt")
    params:
        lambda wildcards: get_params_extract_rates(
            wildcards,
            OUTPUT_FOLDER,
            START_INDEX,
            END_INDEX_ESTIMATION,
        )
    run:
        from scripts.extract_rates import extract_rates
        params = params[0]
        extract_rates(
            reconciliations_estimation_dir=os.path.dirname(input.proof_reconciliations_estimation),
            start_index=params['start_index'],
            end_index_estimation=params['end_index_estimation'],
            rates_file=output.rates,
        )

rule reconcile_all_gene_trees:
    """Reconcile all prepared sampled gene trees using estimated rates."""
    input:
        prepared_species_tree=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/prepared/ale_sampled_species_tree.nwk"),
        prepared_gene_tree_proof=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/prepared/prepared_gene_trees_proof.txt"),
        rates=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/rates.txt"),
    output:
        proof_reconciliation=str(OUTPUT_FOLDER / "species_tree_{sp_tree_index}/reconciliations/done"),
    params:
        lambda wildcards: get_params_reconcile_all_gene_trees(
            wildcards,
            OUTPUT_FOLDER,
            START_INDEX,
            END_INDEX,
        )
    run:
        from scripts.reconcile_all_gene_trees import reconcile_all_gene_trees
        params = params[0]

        reconcile_all_gene_trees(
            prepared_species_tree=input.prepared_species_tree,
            prepared_gene_trees_dir=os.path.dirname(input.prepared_gene_tree_proof),
            rates_file=input.rates,
            start_index=params['start_index'],
            end_index=params['end_index'],
            reconciliations_dir=os.path.dirname(output.proof_reconciliation),
            proof_reconciliation=output.proof_reconciliation,
        )
